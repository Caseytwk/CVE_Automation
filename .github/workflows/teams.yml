name: CVE Alert

on:
  workflow_run:
    workflows: ["CVE Monitor"]
    types:
      - completed

jobs:
  alert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  

      - name: Ensure jq is available
        run: sudo apt-get install -y jq

      - name: Extract previous results.json
        run: |
          git show HEAD^:output/results.json > old_results.json || echo '{"results":[]}' > old_results.json

      # - name: Compare CVEs
      #   id: compare
      #   run: |
      #     NEW_IDS=$(jq -r '.results[].id' output/results.json)
      #     OLD_IDS=$(jq -r '.results[].id' old_results.json)

      #     NEW_CVES=""
      #     for id in $NEW_IDS; do
      #       if ! echo "$OLD_IDS" | grep -qx "$id"; then
      #         echo "Found new CVE: $id"
      #         NEW_CVES="$NEW_CVES $id"
      #       fi
      #     done

      #     if [ -n "$NEW_CVES" ]; then
      #       echo "$NEW_CVES" > new_ids.txt
      #       echo "trigger_alert=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "trigger_alert=false" >> $GITHUB_OUTPUT
      #     fi
      - name: Compare CVEs
        id: compare
        run: |
          NEW_IDS=$(jq -r '.results[].id' output/results.json)
          OLD_IDS=$(jq -r '.results[].id' old_results.json)
      
          NEW_CVES=""
          for id in $NEW_IDS; do
            if ! echo "$OLD_IDS" | grep -qx "$id"; then
              echo "Found new CVE: $id"
              NEW_CVES="$NEW_CVES $id"
            fi
          done
      
          echo "$NEW_CVES" > new_ids.txt
      
          if [ -n "$NEW_CVES" ]; then
            echo "trigger_alert=true" >> $GITHUB_OUTPUT
          else
            echo "trigger_alert=false" >> $GITHUB_OUTPUT
          fi

      - name: Annotate new CVEs
        run: |
          python annotate_new_cves.py
  
      - name: Generate PDF Report
        run: |
          python generate_pdf_report.py
  
      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: cve-report
          path: output/cve_report.pdf

      - name: Debug output
        run: |
          echo "Old IDs:"
          cat old_results.json | jq '.results[].id'
          echo "New IDs:"
          cat output/results.json | jq '.results[].id'
          echo "Trigger: ${{ steps.compare.outputs.trigger_alert }}"


      - name: Format and send Teams alert
        if: steps.compare.outputs.trigger_alert == 'true'
        run: |
          MESSAGE="ðŸš¨ *New CVEs detected!*<br><br>"
          for id in $(cat new_ids.txt); do
            entry=$(jq -r --arg id "$id" '.results[] | select(.id==$id)' output/results.json)
            title=$(echo "$entry" | jq -r '.title // .description')
            severity=$(echo "$entry" | jq -r '.severity')
            ref=$(echo "$entry" | jq -r '.reference // empty')
            [ -z "$ref" ] && ref="https://nvd.nist.gov/vuln/detail/$id"
            MESSAGE+="<b>$id</b> ($severity)<br>$title<br><a href=\"$ref\">$ref</a><br><br>"
          done
          MESSAGE+="ðŸ‘‰ <a href='https://caseytwk.github.io/CVE_Automation/'>View full dashboard</a>"

          TEXT=$(echo "$MESSAGE" | jq -Rs .)
          curl -H "Content-Type: application/json" \
               -d "{\"text\": $TEXT}" \
               ${{ secrets.TEAMS_WEBHOOK_URL }}
